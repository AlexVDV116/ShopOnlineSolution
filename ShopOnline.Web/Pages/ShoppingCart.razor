@page "/ShoppingCart"
@using ShopOnline.Web.Services.Contracts

@if (ShoppingCartItems == null && ErrorMessage == null)
{
    <DisplaySpinner></DisplaySpinner>
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <h3 class="mb-5">Shopping Cart</h3>
    @if (ShoppingCartItems.Count() > 0)
    {
        <div class="row mb-5">
            <div class="col-md-9">
                @foreach (var item in ShoppingCartItems)
                {
                    <div class="row mb-4">
                        <div class="col-md-4">
                            <img src="@item.ProductImageURL" width="300" class="img-thumbnail" alt="Product Image">
                        </div>
                        <div class="col-md-8">
                            <h5>@item.ProductName</h5>
                            <div class="mb-4">@item.ProductDescription</div>
                            <span>
                                Price: <b>@item.Price.ToString("C")</b>
                                <input @oninput="() => UpdateQty_Input(item.Id)" type="number" @bind=@item.Qty/>
                                <button data-itemId="@item.Id" 
                                    @onclick="() => UpdateQtyCartItem_Click(item.Id, item.Qty)" 
                                        class="btn btn-info btn-sm update-qty">Update Qty</button>
                            </span>
                            <div>
                                <button @onclick="() => DeleteCartItem_Click(item.Id)" class="btn btn-danger sm">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-3">
                <h5>Cart Summary</h5>
                <div class="mt-2">
                    <div>Total - (@TotalQuantity items)&nbsp;<b>@TotalPrice</b></div>
                    <a href="#" class="btn btn-success">
                        <span class="oi oi-credit-card"></span>&nbsp; Proceed to Checkout
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            Your shopping cart is empty.
        </div>
    }
}

@code
{
    [Inject]
    public IJSRuntime Js { get; set; } 
    
    [Inject] public IShoppingCartService ShoppingCartService { get; set; }

    public List<CartItemDto> ShoppingCartItems { get; set; }

    public string ErrorMessage { get; set; } = null!;
    
    protected string TotalPrice { get; set; }
    
    protected int TotalQuantity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ShoppingCartItems = await ShoppingCartService.GetItems(HardCoded.UserId);
            CartChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected async Task DeleteCartItem_Click(int id)
    {
        var cartItemDto = await ShoppingCartService.DeleteItem(id);

        RemoveCartItem(id);
        CartChanged();
    }

    protected async Task UpdateQtyCartItem_Click(int id, int qty)
    {
        if (qty > 0)
        {
            var updateItemDto = new CartItemQtyUpdateDto()
            {
                CartItemId = id,
                Qty = qty
            };

            var returnedUpdateItemDto = await ShoppingCartService.UpdateQty(updateItemDto);
            
            UpdateItemTotalPrice(returnedUpdateItemDto);
            CartChanged();
            
            await MakeUpdateQtyButtonVisible(id, false);
        }
        else
        {
            var item = ShoppingCartItems.FirstOrDefault(i => i.Id == id);

            if (item != null)
            {
                item.Qty = 1;
                item.TotalPrice = item.Price;
            }
        }
    }

    protected async Task UpdateQty_Input(int id)
    {
        await MakeUpdateQtyButtonVisible(id, true);
    }

    private async Task MakeUpdateQtyButtonVisible(int id, bool visible)
    {
        await Js.InvokeVoidAsync("MakeUpdateQtyButtonVisible", id, visible);
    }

    private void UpdateItemTotalPrice(CartItemDto cartItemDto)
    {
        var item = GetCartItem(cartItemDto.Id);

        if (item != null)
        {
            item.TotalPrice = cartItemDto.Price * cartItemDto.Qty;
        }
    }
    
    private void CalculateCartSummaryTotals()
    {
        SetTotalPrice();
        SetTotalQuantity();
    }

    private void SetTotalPrice()
    {
        TotalPrice = ShoppingCartItems.Sum(p => p.TotalPrice).ToString("C");
    }
    
    private void SetTotalQuantity()
    {
        TotalQuantity = ShoppingCartItems.Sum(p => p.Qty);
    }

    private CartItemDto GetCartItem(int id)
    {
        return ShoppingCartItems.FirstOrDefault(i => i.Id == id);
    }

    private void RemoveCartItem(int id)
    {
        var cartItemDto = GetCartItem(id);

        ShoppingCartItems.Remove(cartItemDto);
    }
    
    private void CartChanged()
    {
        CalculateCartSummaryTotals();
        ShoppingCartService.RaiseEventOnShoppingCartChanged(TotalQuantity);
    }
}