@page "/ProductsByCategory/{CategoryId:int}"

@if(Products == null && ErrorMessage == null)
{
    <DisplaySpinner/>
}
else if(ErrorMessage != null)
{
    <DisplayError ErrorMessage = "@ErrorMessage" />
}
else
{
    <h3>Products (@CategoryName)</h3>
   
    @if(Products.Count() > 0)
    {
        <div class = "row mt-3">
          <DisplayProducts Products = "@Products"></DisplayProducts>
        </div>
    }

}

@code {
    [Parameter] 
    public int CategoryId { get; set; }

    [Inject] 
    public IProductService ProductService { get; set; }
    
    [Inject]
    public IManageProductsLocalStorageService ManageProductsLocalStorageService { get; set; }

    public IEnumerable<ProductDto> Products { get; set; }
    public string CategoryName { get; set; }
    public string ErrorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Products = await GetProductCollectionByCategoryId(CategoryId);
            
            if (Products != null && Products.Count() > 0)
            {
                var productDto = Products.FirstOrDefault(p => CategoryId == CategoryId);

                if (productDto != null)
                {
                    CategoryName = productDto.CategoryName;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task<IEnumerable<ProductDto>> GetProductCollectionByCategoryId(int categoryId)
    {
        var productCollection = await ManageProductsLocalStorageService.GetCollection();

        if (productCollection != null)
        {
            return productCollection.Where(p => p.CategoryId == categoryId);
        }
        else
        {
            return await ProductService.GetItemsByCategory(categoryId);
        }
    }
}